#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>


//vs代码调试技巧:

//
// (1)bug:程序漏洞
//    debug:调试
//
//  (2)debug和release区别
//   debug是调试版本,附加调试信息,便于程序员调试
//   release是发布版本 :是经历过各种优化的,不包含调试信息,无法调试的,可被用户直接使用的
// 
//  (3)怎么样开始调试
//     1. 环境准备,使用具有调试功能的软件,比如vs
//     2. 调试快捷键:
//        F9      ,创建断点和取消断点
//     断点的作用是可以在程序的任意位置设置断点,打上断点就可以让程序执行到想要的位置暂停执行,接下来就可以用F10和
// F11这些快捷键观察细节 
//     条件断点:满足这个条件才触发断点
//        F5       启动调试,经常用来直接跳到下一个断点处,一般是和F9配合使用
//        F10      逐过程(即运行一整个过程来到下一个过程),
//                 通常用来处理一个过程,一个过程可以是一次函数调用,或者是执行一次语句
//        F11      逐语句(一句一句来) ,
//                 就是每次都执行一次语句,但是这个快捷键的执行逻辑可以使我们进入函数内部,
//                 在函数调用的地方,想进入函数内部观察细节,必须使用F11,如果使用F10,则直接完成函数调用
//        CTRL  + F5  开始执行不调试,如果你想让程序运行起来不调试就可以直接使用
// 
//        注意:F5跳过的是执行逻辑上的断点,而不是代码编辑区物理位置上的断点
//             条件断点是在断点上右击点击设置条件
// 
// 
//        监视和内存观察  :     调试过程中,观察代码执行过程中变量的值,两种方法即监视和内存观察
//        1  监视:  只有在开始调试后才可使用 在[调试]->[窗口]->[监视]打开任意一个窗口,输入要观察的对象即可
//        2  内存:  同样只有在开始调试之后   在[调试]->[窗口]->[内存]打开任何一个内存,输入变量的地址(数组名
//        或者取地址)  修改列数(列数的单位是字节)
// 
//

//        编程常见错误归类
//        1 编译型错误 :编译期间发现的,一般是语法问题
//        2 链接型错误 :比如不包含头文件;函数名拼写错误;或者未有文件但是仍进行链接,一般找错误信息的符号名,看是否
//          存在
//        3 运行型错误 : (1)没有语法问题(2)没有链接问题(3)程序运行起来但是结果有问题
//          这种问题可以从调试还有代码执行逻辑上解决
// 
// 
// 
//
#include <iostream>
using namespace std;

//int main()
//{
//	int a[10] = { 0 };
//	int i = 0;
//	for (; i < 10; i++)
//	{
//		a[i] = i;
//	}
//
//	for (int i=0; i < 10; i++)
//	{
//		printf("a[i]=%d\n" ,a[i]);
//	}
//
//	return 0;
//}


//求 1!+2!+....+10!的和
int main()
{
	int sum = 0;
	int i = 1;
	int j = 0;


	for (; i <= 10; i++)
	{
		int sum1 = 1;//有的时候,在纸上走一走流程和调试效果相媲美   所以我一直在搞的走流程实际就是在调试代码
		for(j=1;j<=i;j++)
		{
			
			sum1 = sum1 * j;
		}
		sum = sum + sum1;
	}
	printf("1~10数字阶乘的和 = %d\n",sum);

	return 0;
}