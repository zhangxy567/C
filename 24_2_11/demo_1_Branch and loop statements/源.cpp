#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

#include <iostream>
using namespace std;
//C语言是一门结构化语言,三种结构:顺序结构,选择结构,循环结构


//C语言的逻辑判断:     表达式,如果是 0 ,则为假,   如果是  非0, 则为真 
// 
// if语句: 三种形式 1. if(表达式) 语句 
// 
//                 2. if(表达式) 语句1 
//                    else 语句2
// 
//                 3. if(表达式1) 语句1   
//                    else if(表达式2)  语句2 
//                    else if(表达式3)  语句3 
//                    .......
//                    else if(表达式n)  语句n 
//                    else  语句n+1
// 注意: if语句的执行内容可以是单句语句,也可以是用{}构成的代码块
// 
// 悬空else问题: else总是与最近的if匹配(82-86行代码不打印)
// if else算一个语句 嵌套的时候可以算作if else的嵌套语句,可以不用语句块囊括
// 
// 
// 
// C语言用于比较的表达式,称为关系表达式,里面使用的运算符就是关系运算符
// 主要有以下六个:
// >  大于运算符
// <  小于运算符
// >= 大于等于运算符
// <= 小于等于运算符
// == 相等运算符
// != 不相等运算符
// (1)关系表达式通常返回  1 或 0 表示真假
// C语言中,  非0值表示真  , 0表示假  比如  35>12 返回 1 , 12>35 返回 0
// 关系表达式的结果通常用于判断(if , while语句)
// (2)相等运算符和赋值运算符是两个完全不同的预算符:
// 相等运算符返回值只有0 和 1 ,分别表示两个值不相等和相等;
// 赋值运算符是把右值付给左值,表达式返回的值是左值
// 为了防止常量和变量判断相等时候不出现使用错误,建议常量放在左侧,变量放在右侧(108-112)
// 
// 
// 多个关系运算符不易连用,达不到预期效果,比如i<j<k,往往达不到预期效果
// (C语言中的大部分运算符都是从左向右结合的)
// 当多个关系符的运行时从左往右的,从左向右开始按照运算符一个一个计算,计算结果(0/1)作为下一个同级运算符的左值,直至只剩结果,无运算符
// 要想表达j的范围处于i和k之间,只能使用逻辑操作符   &&   来表达, 如  (i<j)&&(j<k)
// 
// 
// 条件操作符也就是三目操作符(C语言的唯一三目操作符)  如下:  (表达式1)?(表达式2):(表达式3)
// 三目操作符是一种天然的二选一的分支表达式
// 三目操作符计算逻辑: 如果  exp1 为真 ,则计算表达式2,表达式3不计算,并将表达式2的结果作为整个表达式结果;
//                    如果  exp1 为假 ,则计算表达式3,表达式2不计算,并将表达式3的结果作为整个表达式结果;(120-127行代码)
// 120-127行同时体现前置++和后置++的区别
// 三目操作符可以替代简单的if else语句
// 
// 
// 逻辑操作符(提供逻辑判断功能): &&   ||   !
// !: 逻辑取反运算符, 把非0变为0,把0变为1;    通常用于 变量/表达式 的取反,或者 变量/表达式 为假要做什么事情的时候使用
// &&: 与运算符,两侧都为真,则是真,否则为假;
// ||: 或运算符,两侧都为假,则是假,否则为真;   C语言的或不是排除或,而是逻辑或,解释如下
//  排除或(异或/XOR)的多种表示方法   :   1.  (A||B)&&!(A&&B)    2.    (!A && B) || ( A && !B)

/*
C语言的逻辑或和现实中的排除或有什么区别
ChatGPT  :
C语言中的逻辑或 || 和现实中的排除或（XOR，Exclusive OR）是有一些区别的。
逻辑含义：
C语言中的逻辑或 || 表示的是在多个条件中，只要有一个条件为真，整个表达式就为真。这是一种联合的逻辑操作，不排除任何条件。
现实中的排除或（XOR）表示的是在多个条件中，只有一个条件为真时，整个表达式才为真。这是一种排他的逻辑操作，排除了其他条件。
应用场景：
逻辑或 || 在编程中常用于判断条件是否满足，控制程序的流程，允许多种情况中的任意一种发生。
排除或（XOR）在现实生活中常用于选择性的操作，表示在多个选项中只能选择一个，而不能同时选择多个。例如，在某些情况下，只能选择做 A 或者 B，
不能同时做 A 和 B。
因此，虽然C语言中的逻辑或 || 和现实中的排除或有时候会有相似的应用场景，但它们的逻辑含义和运用方式是不同的。
*/

// 
// C语言变量小知识点:  局部变量未初始化,它的值是随机的;全局变量未初始化,它的值是0 //  初始化英文  : uninitialized
// 
// 
// 
// 
//




int main()
{

//判断一个数是否为奇数:
	//int a;
	//scanf("%d", &a);
	//if (a % 2)  printf("所输入的值为奇数\n");
	//else printf("所输入的值为偶数\n");
	//return 0;
	//
	//
	//输入一个数,判断是正数,0,还是负数
	//新手版
	//
	//
	//int a;
	//scanf("%d", &a);
	//
	//if (a < 0)
	//	printf("所输入的值是负数");
	//else
	//	{
	//	if (a == 0)
	//		printf("所输入的值为零");
	//	  else
	//		printf("所输入的值为正数");
	//
	//	}
	//
	//高级版
	//int a;
	//scanf("%d", &a);
	//if (a < 0) printf("所输入的值为负数");
	//else if (a == 0) printf("所输入的值为0");
	//else printf("所输入的值为正数");
	//
	//
	//int a;
	//scanf("%d", &a);
	//if (a < 18)	printf("少年");
	//else if (  a>=18  &&  a<=44  )  printf("青年");
	//else if (  a>=45  &&  a<=59  )  printf("中老年");
	//else if (  a>=60  &&  a<=89  )  printf("老年");
	//else if (  a>=90  )  printf("老寿星");
	//return 0;
	//
	//int a = 0;
	//int b = 2;
	//if (a == 1)
	//	if (b == 2) printf("hehe");
	//else printf("haha");
	//int a = 100;
	//printf("%d", a == 6);
	//
	//
	//int a = 0;
	//if (1=a)
	//	printf("hehe\n");
	//int n = 5, k = 10;
	//int m = (2 - 1 ? n++ : k++);
	//printf("%d\n", m);
	//printf("%d\n", n);
	//printf("%d\n", k);
	//
	//
	//int a=0,b=0;
	//scanf("%d", &a);
//
	//printf("b = %d", b = (a > 5 ? 3 : -3));
	//
	//int a = 0, b = 0;
	//scanf("%d", &a);
	//(a > 5 ? b = 3 : b = -3);
	//printf("b = %d", b);
	//
	//使用条件操作符找两值最大
	//
	//int max, a, b;
	//scanf("%d%*c%d", &a, &b);
	//max = (a > b ? a : b);
	//printf("max = %d", max
	//);

	//int flag=0;
	//if(!flag) printf("do.....");
	//
	//printf("%d", a);
	//int m;
	//scanf("%[1]d", &m);
	//if (m >= 3 && m <= 5) printf("春天\n");

	int a=0;
	scanf("%d", &a);
	if (a == 12 || a == 1 || a == 2) printf("冬季");
	else printf("不是冬季");
	return 0;
}