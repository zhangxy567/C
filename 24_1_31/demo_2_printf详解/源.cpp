#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

#include <iostream>
using namespace std;



//printf函数详解

//***使用printf函数必须包括   #include<stdio.h> 这一头文件

//占位符的使用要么使用兼容类型的,要么使用完全复合类型的


//printf函数的占位符[输出形式]有哪些:

// 常用:
//   %d  输出有符号十进制整型
//   %s  输出 <字符串>
//   %c  以 <字符> 形式输出
//   %f  小数输出形式(包含float和double类型)
//   %lf 小数输出形式(double类型)
//   %Lf 小数输出形式(long double类型)
//   %o  八进制整数
//   %p  指针地址的形式
//   %u  无符号整数 unsigned int 
//   %x  十六进制整数
//   %zd sizt_t类型(sizeof的返回值类型)
//   %%  输出一个百分号
//   %#x 以小写字母表示十六进制数字，并在前面加上0x前缀。//这两个常用来输出地址
//   %#X 以大写字母表示十六进制数字，并在前面加上0x前缀。
// 罕见://   %Le  科学计数法表示的 long double 类型
//   %Lf  long double 类型的浮点数
//   %lld 十进制的 long long int 类型
//   %llo  八进制的 long long int 类型
//   %llx  十六进制的 long long int 类型
//   %llu  unsigned long long int
//   %ld  十进制的 long int 类型
//   %lo  八进制的 long int 类型
//   %lx  十六进制的 long int 类型
//   %lu  unsigned long int
//   %hd  十进制的 short int类型输出
//   %ho  八进制的 short int类型输出
//   %hx  十六进制的 short int类型
//   %hu  unsigned short int 类型
//   %a   十六进制浮点数 小写输出
//   %A   十六进制浮点数 大写输出
//   %e   以科学计数法输出浮点数, 指数部分的e为小写
//   %E   以科学计数法输出浮点数, 指数部分的E为小写
//   %i   整数,基本等同于%d
//   %g   六个有效数字的小数,整数部分超过六位,自动转换为科学计数法 ,其中指数部分 e 为小写
//   %G   等同于 %g ，唯?的区别是指数部分的 E 为?写
//   %n   已输出的字符串数量,该占位符本身不输出,只能将值赋给<变量>


//printf函数可以定制占位符的输出格式

//printf容许 通过修改  占位符  "%"  和  <数据类型> 之间的内容 来控制占位符输出的格式
//从而控制输出内容格式
// 
//对整数限制  <最小> 宽度:  %5d 输出数据如果不满五位,则在前面加上空格补齐五位
//同时在补齐空格时默认右对齐,如果要求左对齐可以通过添加负号  如   %-5d
//如果打印内容超过五位,按照实际情况打印就行
//
//对小数也是 限制  <最小>宽度:
//和整数类似,限制最小输出位数,不够前面补空格
//注:小数的默认显示精度是小数点后六位
//
//总是显示正负号
//printf默认只对负数显示符号,而正号不显示
//如果想让正数也输出正号,在"%"后面加上+即可
//注:"+"只表示显示符号,即使是负数,在"%"后加了 "+"也还是显示负数
//
// 
// 严格限制  <最大>  位数
//限定小数位数:
//小数默认输出时,是小数点后六位
//举例来说,如果想要小数输出时只保留两位 可以用  %.2f 控制输出小数只保留两位
//如果实际位超出目标位数,会进行四舍五入,如果实际值比目标位短,则用"0"补位,和整数用空格补位不同
//
//
//复合使用:
//限定宽度的操作方法可以和限定小数最大位数的操作结合起来
//例:  %6.2f
//高级技巧:  % 6 .2 f 这个占位符的最小宽度和最大小数长度都可以用"*"代替,通过printf函数的后边参数传入
//例: printf("%*.*f",6,2,0.5)
//
//
//输出部分字符串:
//%s输出字符串,默认输出全部字符串
//如果只想输出<开头>部分,可以用%.[m]s指定输出的长度
//其中[m]表示一个数字,代表要输出的长度
//注:只限制最大长度,即如果实际超过目标,则只打印[m]长度范围内字符串,
// 如果实际不超过[m]长度内容,则全部打印,和%s效果无异
int main()
{

	//printf的 f 表示为单词format即"格式"  即以格式输出

	//本人C语言区别"/" 和 "\"的方法为 "/" 称为<斜杠>,"\"称为<倒斜杠>
	
	//printf输出结尾不会自动换行,而是停留在输出结束的地方
	// 可以添加\n进行换行至下一行行首 
	// 例子:
	//printf("鹏哥sb");
	//printf("鹏哥sb\n");
	//\n不仅可以放到字符串尾,也可以放在字符串头或者字符串中,完全没有限制,注意目标效果即可



	//printf的丰富使用在于占位符,[占位符的位置可由其他内容代替]
	// 占位符使得printf函数的输出类容可随时更改,使得代码更加灵活
	//占位符的第一个字符一律为%号,第二个字符表示类型
    //占位符的个数与字符串参数后的带入参数必须一一对应,不可缺少


	//注意占位符和转义字符不可搞混,如下两个完全不是一个东西
	//printf("\a");
	//printf("%a");


	//%n 和\n不是同一个东西
	// %n在vs 2022上支持度不高
	//int num;
	//printf("hello,are you ok?%n\n", &num);
	//printf("%d\n", num);

	//printf("%-5d", 123);
	//printf("%d", 123);


	//printf("%+d", 114514);
	//printf("%6.2f\n", 3.14);

	//printf("%*.*f", 6, 2, 0.5);

	//printf("%.12s", "hello world");
	//printf("hello world");

	return 0;
}